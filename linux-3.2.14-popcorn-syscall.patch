diff --git a/include/linux/multikernel.h b/include/linux/multikernel.h
new file mode 100644
index 0000000..d0781d4
--- /dev/null
+++ b/include/linux/multikernel.h
@@ -0,0 +1,12 @@
+#ifndef __LINUX_MULTIKERNEL_H
+#define __LINUX_MULTIKERNEL_H
+/*
+ * Boot parameters and other support stuff for MKLinux
+ *
+ * (C) Ben Shelton <beshelto@vt.edu> 2012
+ */
+
+extern int mklinux_boot;
+
+#endif /* __LINUX_MULTIKERNEL_H */
+
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 86a24b1..2f6f0e4 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -857,4 +857,9 @@ asmlinkage long sys_process_vm_writev(pid_t pid,
 				      unsigned long riovcnt,
 				      unsigned long flags);
 
+asmlinkage long sys_multikernel_boot(int cpu,
+				     unsigned long kernel_start_address);
+
+asmlinkage long sys_get_boot_params_addr(void);
+
 #endif
diff --git a/kernel/Makefile b/kernel/Makefile
index e898c5b..0d2f360 100644
--- a/kernel/Makefile
+++ b/kernel/Makefile
@@ -24,6 +24,7 @@ CFLAGS_REMOVE_sched_clock.o = -pg
 CFLAGS_REMOVE_irq_work.o = -pg
 endif
 
+obj-$(CONFIG_POPCORN) += multikernel.o
 obj-$(CONFIG_FREEZER) += freezer.o
 obj-$(CONFIG_PROFILING) += profile.o
 obj-$(CONFIG_SYSCTL_SYSCALL_CHECK) += sysctl_check.o
diff --git a/kernel/multikernel.c b/kernel/multikernel.c
new file mode 100644
index 0000000..19f9447
--- /dev/null
+++ b/kernel/multikernel.c
@@ -0,0 +1,58 @@
+/*
+ * Boot parameters and other support stuff for MKLinux
+ *
+ * (C) Ben Shelton <beshelto@vt.edu> 2012
+ */
+
+#include <linux/rcupdate.h>
+#include <linux/rculist.h>
+#include <linux/kernel.h>
+#include <linux/export.h>
+#include <linux/percpu.h>
+#include <linux/init.h>
+#include <linux/gfp.h>
+#include <linux/smp.h>
+#include <linux/cpu.h>
+#include <linux/syscalls.h>
+
+extern unsigned long orig_boot_params;
+
+int mklinux_boot;
+EXPORT_SYMBOL(mklinux_boot);
+
+static int __init setup_mklinux(char *arg)
+{
+        mklinux_boot = 1;
+        return 0;
+}
+early_param("mklinux", setup_mklinux);
+
+
+/* We're going to put our syscall here, since we need to pass in
+   two arguments but the reboot syscall only takes one */
+
+SYSCALL_DEFINE2(multikernel_boot, int, cpu, unsigned long, kernel_start_address)
+{
+	int apicid, apicid_1;
+
+	printk("multikernel boot: got to multikernel_boot syscall, cpu %d, apicid %d (%x), kernel start address 0x%lx\n",
+			cpu, apic->cpu_present_to_apicid(cpu), BAD_APICID,kernel_start_address);
+
+	apicid_1 = per_cpu(x86_bios_cpu_apicid, cpu);
+
+	apicid = apic->cpu_present_to_apicid(cpu);
+	if (apicid == BAD_APICID)
+		printk(KERN_ERR"The CPU is not present in the current present_mask (OK to continue), apicid = %d, apicid_1 = %d\n", apicid, apicid_1);
+	else {
+		printk(KERN_ERR"The CPU is currently running with this kernel instance. First put it offline and then continue. apicid = %d, apicid_1 = %d\n", apicid, apicid_1);
+		return -1;
+	}
+	apicid = per_cpu(x86_bios_cpu_apicid, cpu);  
+	return mkbsp_boot_cpu(apicid, cpu, kernel_start_address);
+}
+
+SYSCALL_DEFINE0(get_boot_params_addr)
+{
+	printk("POPCORN: syscall to return phys addr of boot_params structure\n");
+	return orig_boot_params;
+}
