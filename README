
The Popcorn project is subject to the
GNU GENERAL PUBLIC LICENSE
Copyright (c) 2012
Antonio Barbalace, Ben Shelton
Systems Software Research Group, Virginia Tech
http://www.ssrg.ece.vt.edu

-------------------------------------------------------------------------------
POPCORN HACKING GUIDE                                        14th December 2012
-------------------------------------------------------------------------------

linux-3.2.14-popcorn-build.patch
---------------------------------------
It contains a generic scripts (tested on x86) to build the kernel and
automatically install the modules and the kernel with the bootloader.
Should be tested and extended for other architectures. If cannot be ported to
other architecture should be moved in the arch directory.

linux-3.2.14-popcorn-x86-build.patch
---------------------------------------
It contains the default configuration file (ben_config) and the architectural
dependent Kconfig script. ben_config disables the numa support.

linux-3.2.14-popcorn-syscall.patch
---------------------------------------
Implementation of the two multikernel syscalls, architecture independent code.
The code must be vaildated to be architecture neutral because it contains x86 
and apic/APIC symbols that can be architecture dependent.
Note that in the x86 32bit version of the code the multikernel_boot syscall
that actually boot another kernel on the same machine was implemented as part
of the kexec syscall (to contain syscall number allocations).
To contain syscall numbers pollution get_boot_params_addr sycall should be
implemented as /proc or /sys entry.

linux-3.2.14-popcorn-x86-syscall.patch
---------------------------------------
This must be ported to other architectures, user space libraries must be
updated on behalf of this patch with the correct syscall numbers.

linux-3.2.14-popcorn-generic.patch
---------------------------------------
It contains the main Kconfig patch to enable the kernel compilation for Popcorn
(the current code support is only for x86_64).
The cpu_init definition is changed: an integer argument was introduced to help
the kernel decide which is the cpuid. This helped in enabling clustering.
Changes in mm/nobootmem.c enabled the allocation of the kernel anywhere in the
physical address space; before the kernel must be placed in the first 4GB.
The modifications in mm/percpu.c enabled the usage of the selected cpuid
enumeration.

linux-3.2.14-popcorn-x86-generic.patch
---------------------------------------
The patch modifies the arch/x86/mm/dump_pagetables.c in order to give more
informations to the kernel_page_tables debugfs entry helping page table issues
to be debugged faster.
The other modifications are related to the percpu patch. Linux is heavily based
on the assumption that the bootstrap processor has the smp_processor_id 0.
Altought there is a mapping that makes the "first processor to boot" the
processor with id 0, despite is original APICID, in a multikernel there are
many "first processor to boot" (from a kernel standpoint).
As a design decision we decided to maintain the Linux logical cpu mapping to
APICID that follows the BIOS cpu enumeration.
Note that every kernel still creates the percpu data structures for every cpu
because we have plans to dynamically add and remove cpus to any kernel
instance.

linux-3.2.14-popcorn-x86-apic.patch
---------------------------------------
Similar to the previous patch this mainly deals with the cpu enumeration
problems. It adds a kernel global variable called is_bsp_cluster that is true
only if the kernel (that can be loaded on any numebr of cores) was booted by
the bootstrap processor (i.e. the first processor that come up while the
machine is booting). It adds a function lapic_is_bsp() that is true if the
current core is the bootstrap processor. These two help booting popcorn
correctly on x86 in partitioned and clustered mode.
Another contribution of this patch is the IO APIC static redirection to the 
bootstrap processor (or bootstrap cluster). Note that this solution is
temporary. This layer must be further integrated with the device driver layer
and the device masking capabilities developed, furthermore the messaging layer
should provide interrupt mapping as a service.

linux-3.2.14-popcorn-x86-boot.patch
---------------------------------------
It contains the main code to launch a new kernel instance on the same machine.
The launch code is divided into different parts. The trampoline is the main
code that let's a new core booting, we copied and modified the original x86 SMP
Linux trampoline. This approach is similar to kexec but not the same, infact
kexec implement the trampoline in the purgatory code. Note that the kexec
architecture is more modular and should be adopted in the future. The
trampoline code is copied at boot time in low memory (below 16MB) so the code
must be relocatable, a special section was added to the linker script. Due to
the legacy support in x86 the trampoline cannot be allocated in high memory:
the x86 boot code should start in real mode, it can then switch to 32bit and
to 64bit. This is a limitation imposed by the x86 architecture.
The code in smpboot.c provides the infrastructure to check the boot parameters
(the remote core id between others) and starts the remote core boot while
waiting for a remote start message (that confirms that the core is correctly
starting).
We decided to start popcorn from the Linux source code avoiding the loader and
the decompression code in arch/x86/boot. This shortens the booting time while
we are providing the correct bootparams via the rewritten trampoline code.
We have to change the initial physical to virtual mapping in the boot up code
in order to boot anywhere in the physical address space (allowing kernel 
relocation). Note that this is different from the previous 32bit version in
which relocation was done at kernel loading time using a modified kexec binary.
To load the ramdisk everywhere in the physical address space we added couple of
furhter modifications to the bootparams structure. The user space loader must 
be aware of such modifications to correctly load the kernel parameters.

linux-3.2.14-popcorn-x86-vty.patch
---------------------------------------
This patch contains the architecture dependent part of Virtual TTY driver that
allows the creation of fully funtional teletype interfaces between kernels in a
many kernels environment. The code committed is not complete.

linux-3.2.14-popcorn-drivers-vty.patch  
---------------------------------------
It adds Virtual TTY architecture independent support. Note that this driver is
still in a development stage: the buffering infrastructure must be rewritten.
There is still no generic multikernel shared memory support layer on which to
rely on. The code expect a boot time parameter with the physical address of the
shared memory buffer to be used as a message passing buffer.

linux-3.2.14-popcorn-drivers-acpi.patch
---------------------------------------
This patch solves enumeration problems due to the bootup process in the ACPI 
subsystem. Should be architecture dependent (x86), must be checked.

linux-3.2.14-popcorn-drivers-gpu.patch
---------------------------------------
This patch solves enumeration problems due to the bootup process. Note that we
have to consolidate and extend the device masking layer to graphics card, right
now the vgaarb code is only loaded in the bootstrap kernel instance. Must be 
fixed.

linux-3.2.14-popcorn-drivers-pci.patch
---------------------------------------
This patch enable PCI device blacklisting in order to be able to load or not to
load specific devices in a kernel instance. It adds the pci_dev_flags kernel
parameter.

Notes
---------------------------------------
These patches are necessary to boot and load Popcorn Linux. We provide a
modified version of the kexec tool to load a kernel image to be boot. Please
checkout our kexec version before continue with the installation.

Community
---------------------------------------
The Popcorn Linux website can be found at the following url:
http://popcornlinux.org
